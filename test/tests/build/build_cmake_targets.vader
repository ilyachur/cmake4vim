Before:
    silent call OpenTestProject()
    silent call RemoveFile("compile_commands.json")
    silent call RemoveCMakeDirs()
    silent CMakeReset

    silent call ResetPluginOptions()
    " Use on in order to close all windows and avoid E36 error
    silent on

Execute ([CMake targets] Generate cmake project with default settings):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        silent CMakeBuild
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
            silent call system("cmake-build-Release/app/test_app")
            AssertEqual 0, v:shell_error
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute ([CMake targets] Generate cmake project with custom options):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
        let g:cmake_usr_args='-DCUSTOM_OP=ON'
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        silent CMakeBuild
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app shouldn be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
            silent call system("cmake-build-Release/app/test_app")
            AssertEqual 1, v:shell_error
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app shouldn be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
            silent call system("cmake-build-Release/app/Debug/test_app.exe")
            AssertEqual 1, v:shell_error
        endif
    endif

Execute ([CMake targets] Generate cmake project with custom options as argument):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
        silent CMake -DCUSTOM_OP=ON
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        silent CMakeBuild
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app shouldn be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
            silent call system("cmake-build-Release/app/test_app")
            AssertEqual 1, v:shell_error
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
            silent call system("cmake-build-Release/app/Debug/test_app.exe")
            AssertEqual 1, v:shell_error
        endif
    endif

Execute ([CMake targets] Check CMake generator):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        let cmake_info = utils#cmake#common#getInfo()
        let cmake_gen = cmake_info['cmake']['generator']
        if has('win32')
            AssertNotEqual stridx(cmake_gen, utils#gen#vs#getGeneratorName()), -1, 'Cmake Generator '. cmake_gen
        else
            AssertNotEqual stridx(cmake_gen, utils#gen#make#getGeneratorName()), -1, 'Cmake Generator '. cmake_gen
        endif
        echo cmake_gen
    endif

Execute ([CMake targets] Check CMakeClean):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        silent CMakeBuild
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
        silent CMakeClean
        if !has('win32')
            Assert !filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert !filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert !filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute ([CMake targets] Build only library with arguments):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        silent CMakeSelectTarget test_lib
        silent CMakeBuild
        if !has('win32')
            Assert !filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute ([CMake targets] CMakeBuild for test library):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        " Check that make command works with changed build command
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        silent CMakeBuild test_lib
        silent! make
        if !has('win32')
            Assert !filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute ([CMake targets] Check all targets):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        let targets = cmake4vim#GetAllTargets()
        Assert len(targets) >= 5, "Number of targets: " . len(targets) . " List: " . join(targets, " ")
    endif

Execute ([CMake targets] Get cmake targets):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        let targets = split(cmake4vim#CompleteTarget(0,0,0), "\n")
        Assert len(targets) >= 5, "Number of targets: " . len(targets) . " List: " . join(targets, " ")
    endif

Execute ([CMake targets] Get custom build types):
    let g:cmake_variants = { 'custom-build' : { 'cmake_build_type' : 'Debug', 'cmake_usr_args' : { 'CUSTOM_OP':'ON' } } }
    Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
    silent CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    let result = split(cmake4vim#CompleteBuildType(0,0,0), "\n")
    AssertEqual len(result), 5

Execute ([CMake targets] Override default build types):
    let g:cmake_variants = { 'Debug' : { 'cmake_build_type' : 'Debug', 'cmake_usr_args' : { 'CUSTOM_OP' : 'ON' } } }
    Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
    silent CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    let result = split(cmake4vim#CompleteBuildType(0,0,0), "\n")
    AssertEqual len(result), 4
    AssertEqual g:cmake_variants[ 'Debug' ][ 'cmake_usr_args' ], {'CUSTOM_OP':'ON'}

Execute ([CMake targets] Store g:cmake_usr_args with default build types):
    let g:cmake_usr_args = '-DCUSTOM_OP=ON'
    Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
    silent CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    let result = split(cmake4vim#CompleteBuildType(0,0,0), "\n")
    AssertEqual len(result), 4
    for build_type in keys( g:cmake_variants )
        AssertEqual g:cmake_variants[ build_type ][ 'cmake_usr_args' ], {'CUSTOM_OP':'ON'}
    endfor

Execute ([CMake targets] Update g:cmake_usr_args for default build types):
    let g:cmake_usr_args = '-DCUSTOM_OP=ON'
    let genCommand = utils#cmake#getCMakeGenerationCommand()
    AssertNotEqual stridx(genCommand, '-DCUSTOM_OP=ON'), -1

    let g:cmake_usr_args = '-DCUSTOM_TEST=OFF'
    let genCommand = utils#cmake#getCMakeGenerationCommand()
    AssertEqual stridx(genCommand, '-DCUSTOM_OP=ON'), -1, genCommand
    AssertNotEqual stridx(genCommand, '-DCUSTOM_TEST=OFF'), -1

Execute ([CMake targets] Only default build types have default values):
    let g:cmake_variants = { 'custom-build' : { 'cmake_build_type' : 'Debug', 'cmake_usr_args' : {'CUSTOM_OP' : 'ON'} } }
    let g:cmake_usr_args = '-DDEFAULT_OP=ON'
    Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
    silent CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    let result = split(cmake4vim#CompleteBuildType(0,0,0), "\n")
    AssertEqual len(result), 5
    for build_type in filter( keys( g:cmake_variants ), "v:val !=# 'custom-build'" )
        AssertEqual g:cmake_variants[ build_type ][ 'cmake_usr_args' ], {'DEFAULT_OP':'ON'}
    endfor
    AssertEqual g:cmake_variants[ 'custom-build' ][ 'cmake_usr_args' ], {'CUSTOM_OP':'ON'}

Execute ([CMake targets] Get default build types):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        let result = split(cmake4vim#CompleteBuildType(0,0,0), "\n")
        AssertEqual len(result), 4
    endif

Execute ([CMake targets] Check all targets for empty project):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should not be generated"
        let targets = cmake4vim#GetAllTargets()
        AssertEqual len(targets), 0
    endif

Execute ([CMake targets] Check clean target for empty project):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should not be generated"
        let default = utils#gen#common#getCleanTarget()
        AssertEqual default, ''
    endif

Execute ([CMake targets] Check default target for empty project):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should not be generated"
        let default = utils#gen#common#getDefaultTarget()
        AssertNotEqual default, ''
    endif

Execute ([CMake targets] Select all targets for empty project):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should not be generated"
        let cmd = cmake4vim#SelectTarget('all')
        AssertEqual cmd, ''
        Assert !filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should not be generated"
    endif

Execute ([CMake targets] Call CMakeBuild for empty project):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should not be generated"
        silent CMakeBuild
        Assert !filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should not be generated"
    endif

Execute ([CMake targets] Check CMakeClean for empty project):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
        CMakeClean
        Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
    endif
