Before:
    silent call OpenTestProject()
    silent call RemoveCMakeDirs()

    silent call ResetPluginOptions()
    let g:cmake_usr_args="-GNinja"
    silent on

After:
    silent call RemoveCMakeDirs()

Execute ([Ninja] Find Ninja generator):
    if !has('win32') " Skip for Windows
        Assert executable('ninja'), "Ninja is not found!"
    endif

Execute ([Ninja] Check CMake generator name):
    if !has('win32') " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        let cmake_info = utils#cmake#common#getInfo()
        let gen_name = cmake_info['cmake']['generator']
        AssertEqual 'Ninja', gen_name
    endif

Execute ([Ninja] Generate cmake project with Ninja generator):
    if !has('win32') " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
    endif

Execute ([Ninja] Build cmake project with Ninja generator):
    if !has('win32') " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        silent CMakeBuild
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    endif

Execute ([Ninja] Build cmake project with Ninja generator):
    if !has('win32') " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        silent CMakeBuild
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        silent CMakeClean
        Assert !filereadable("cmake-build-Release/app/test_app"), "app should not be built"
        Assert !filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should not be built"
    endif

Execute ([Ninja] Build cmake project with Ninja generator and tests):
    if !has('win32') " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake -DENABLE_TESTS=ON
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        silent CMakeBuild
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    endif

Execute ([Ninja] Build cmake project with -C param):
    if !has('win32') " Skip for Windows
        let g:make_arguments="-C ."
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        silent CMakeBuild
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    endif

Execute ([Ninja] Build cmake project with generator from usr args):
    if !has('win32') " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        silent CMakeBuild
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    endif

Execute ([Ninja] Get all Ninja targets):
    if !has('win32') " Skip for Windows
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        let targets = cmake4vim#GetAllTargets()
        Assert len(targets) > 10
    endif

Execute ([Ninja] Update g:cmake_executable option):
    if !has('win32') " Skip for Windows
        let genCommand = utils#cmake#getCMakeGenerationCommand()
        let buildCommand = utils#cmake#getBuildCommand('build_dir', 'all_target')
        AssertNotEqual stridx(genCommand, 'cmake'), -1
        AssertNotEqual stridx(buildCommand, 'cmake'), -1
        AssertEqual stridx(genCommand, 'custom_make'), -1, genCommand
        AssertEqual stridx(buildCommand, 'custom_make'), -1, buildCommand

        let g:cmake_executable = 'custom_make'
        let genCommand = utils#cmake#getCMakeGenerationCommand()
        let buildCommand = utils#cmake#getBuildCommand('build_dir', 'all_target')
        AssertNotEqual stridx(genCommand, 'custom_make'), -1, genCommand
        AssertNotEqual stridx(buildCommand, 'custom_make'), -1, buildCommand
    endif

Execute ([Ninja] Build single unit with build in source):
    if !has('win32') " skip for windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        CMakeCompileSource app/main.cpp
        Assert filereadable("cmake-build-Release/app/CMakeFiles/test_app.dir/main.cpp.o"), "Object file is not created"
    endif

Execute ([Ninja] Build single unit with build in source, with spaces):
    if !has('win32') && utils#cmake#verNewerOrEq([3, 13]) " skip for windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        CMakeCompileSource app/folder with spaces/test.cpp
        Assert filereadable("cmake-build-Release/app/CMakeFiles/PathWithSpaces.dir/folder_with_spaces/test.cpp.o"), "Object file is not created"
    endif

Execute ([Ninja] Build single unit with build out of source):
    if !has('win32') " skip for windows
        " this is only tested on UNIX so /tmp/ certainly exists
        let g:cmake_build_path_pattern = [ '/tmp/Release', '' ]
        Assert !isdirectory("/tmp/Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("/tmp/Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("/tmp/Release/build.ninja"), "build.ninja should be generated"
        CMakeCompileSource app/main.cpp
        Assert filereadable("/tmp/Release/app/CMakeFiles/test_app.dir/main.cpp.o"), "Object file is not created"
        call RemoveDirectory("/tmp/Release")
    endif

Execute ([Ninja] Build single unit without build folder):
    if !has('win32') " skip for windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        redir => error_message
        CMakeCompileSource app/main.cpp
        redir END
        AssertEqual "\nCMake project was not found!", error_message
    endif

Execute ([Ninja] Build single unit without CMake info):
    if !has('win32') " skip for windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        call RemoveFile("cmake-build-Release/CMakeCache.txt")
        redir => error_message
        CMakeCompileSource app/main.cpp
        redir END
        AssertEqual "\nCMake cache was not found!", error_message
    endif

Execute ([Ninja] Build non-existant source file):
    if !has('win32') " skip for windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        redir => error_message
        silent CMakeCompileSource nonexistant-filename
        redir END
        AssertEqual "\nGiven file is not a source file!", error_message
    endif

Execute ([Ninja] Build file which has no target):
    if !has('win32') " skip for windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        silent CMakeCompileSource tests/src/test_class.cpp
        Assert getqflist()[-1].text =~# 'unknown target'
    endif
