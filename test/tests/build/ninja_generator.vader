Before:
    silent call OpenTestProject()

    silent call ResetPluginOptions()
    let g:cmake_project_generator="Ninja"
    if !has('win32')
        let g:make_arguments='-j8'
    endif
    silent on

Execute ([Ninja] Find Ninja generator):
    if !has('win32') " Skip for Windows
        Assert executable('ninja'), "Ninja is not found!"
    endif

Execute ([Ninja] Check CMake generator with Ninja):
    if !has('win32') " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        let cmake_info = utils#cmake#common#getInfo()
        let gen_name = cmake_info['cmake']['generator']
        AssertEqual 'Ninja', gen_name
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
    endif

Execute ([Ninja] Build cmake project with Ninja generator):
    if !has('win32') " Skip for Windows
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        silent CMakeBuild
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    endif

Execute ([Ninja] Clean cmake project with Ninja generator):
    if !has('win32') " Skip for Windows
        silent CMake
        silent CMakeBuild
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        silent CMakeClean
        Assert !filereadable("cmake-build-Release/app/test_app"), "app should not be built"
        Assert !filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should not be built"
    endif

Execute ([Ninja] Build cmake project with Ninja generator and tests):
    if !has('win32') " Skip for Windows
        silent CMakeResetAndReload -DENABLE_TESTS=ON
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        silent CMakeBuild
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    endif

Execute ([Ninja] Build cmake project with -C param):
    if !has('win32') " Skip for Windows
        let g:make_arguments = "-C ."
        silent CMakeResetAndReload
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        silent CMakeBuild
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    endif

Execute ([Ninja] Build cmake project with generator from usr args):
    if !has('win32') " Skip for Windows
        let g:cmake_project_generator=""
        let g:cmake_usr_args="-GNinja"
        silent CMakeResetAndReload
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/build.ninja"), "build.ninja should be generated"
        silent CMakeBuild
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    endif

Execute ([Ninja] Get all Ninja targets):
    if !has('win32') " Skip for Windows
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        let targets = cmake4vim#GetAllTargets()
        Assert len(targets) > 10
    endif

Execute ([Ninja] Update g:cmake_executable option):
    if !has('win32') " Skip for Windows
        let genCommand = utils#cmake#getCMakeGenerationCommand()
        let buildCommand = utils#cmake#getBuildCommand('build_dir', 'all_target')
        AssertNotEqual stridx(genCommand, 'cmake'), -1
        AssertNotEqual stridx(buildCommand, 'cmake'), -1
        AssertEqual stridx(genCommand, 'custom_make'), -1, genCommand
        AssertEqual stridx(buildCommand, 'custom_make'), -1, buildCommand

        let g:cmake_executable = 'custom_make'
        let genCommand = utils#cmake#getCMakeGenerationCommand()
        let buildCommand = utils#cmake#getBuildCommand('build_dir', 'all_target')
        AssertNotEqual stridx(genCommand, 'custom_make'), -1, genCommand
        AssertNotEqual stridx(buildCommand, 'custom_make'), -1, buildCommand
    endif
