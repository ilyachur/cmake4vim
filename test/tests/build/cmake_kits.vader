Before:
    silent call OpenTestProject()
    silent call RemoveFile("compile_commands.json")
    silent call RemoveCMakeDirs()

    silent call ResetPluginOptions()
    let g:cmake_kits = {
                \ "First":
                \ {
                \    "toolchain_file" : "android.toolchain.cmake",
                \    "cmake_usr_args": { "ANDROID_STL": "c++_static", "ANDROID_TOOLCHAIN": "clang", "ANDROID_ABI": "arm64-v8a" },
                \    "compilers": { "C": "clang", "CXX": "clang++" },
                \    "generator": "Ninja",
                \    "environment_variables" : { "MY_CUSTOM_VARIABLE" : "15", "MY_OTHER_CUSTOM_VARIABLE" : "YES" }
                \},
                \ "Second" : { "compilers" : { "C": "", "CXX": "" }, "cmake_usr_args" : { 'Flag' : 'ON' } } }
    silent call utils#cmake#reloadCMakeKits()
    " Use on in order to close all windows and avoid E36 error
    silent on

After:
    silent call RemoveFile("compile_commands.json")
    silent call RemoveFile(".cmake-kits.json")
    silent call RemoveFile(g:cmake_kits_global_path)
    silent call RemoveCMakeDirs()

Execute ([CMake kits] Check CMakeKit autocomplete):
    let kits = split(cmake4vim#CompleteKit(0,0,0))
    AssertEqual len(kits), 2
    AssertEqual kits, [ "First", "Second" ]
    let g:cmake_kits[ "Third" ] = { "toolchain_file" : "random_third.txt" }
    let kits = split(cmake4vim#CompleteKit(0,0,0))
    AssertEqual len(kits), 3
    AssertEqual kits, [ "First", "Second", "Third" ]

Execute ([CMake kits] Check toolchain file):
    let g:cmake_kits = {}
    let g:cmake_toolchain_file = 'android.toolchain.cmake'

    Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
    silent CMake
    Assert isdirectory("cmake-build-Release"), "Build directory should exist"
    let generation_command = utils#cmake#getCMakeGenerationCommand()
    Assert generation_command =~# '-DCMAKE_TOOLCHAIN_FILE=android.toolchain.cmake', generation_command

Execute ([CMake kits] Check CMakeKit toolchain file):
    Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
    silent CMakeSelectKit First
    silent CMake
    Assert isdirectory("cmake-build-Release"), "Build directory should exist"
    let generation_command = utils#cmake#getCMakeGenerationCommand()
    Assert generation_command =~# '-DCMAKE_TOOLCHAIN_FILE=android.toolchain.cmake'

Execute ([CMake kits] Check toolchain file precedence over compilers):
    Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
    silent CMakeSelectKit First
    silent CMake
    Assert isdirectory("cmake-build-Release"), "Build directory should exist"
    let generation_command = utils#cmake#getCMakeGenerationCommand()
    Assert generation_command =~# '-DCMAKE_TOOLCHAIN_FILE=android.toolchain.cmake'
    Assert generation_command !~# '-DCMAKE_C_COMPILER'
    Assert generation_command !~# '-DCMAKE_CXX_COMPILER'

Execute ([CMake kits] Check CMakeKit compilers setting):
    silent call remove( g:cmake_kits["First"], "toolchain_file" )
    Assert !isdirectory("cmake-build-Release"), "Build directory should not exist"
    silent CMakeSelectKit First
    silent CMake
    Assert isdirectory("cmake-build-Release"), "Build directory should exist"
    let generation_command = utils#cmake#getCMakeGenerationCommand()
    Assert generation_command =~# '-DCMAKE_C_COMPILER=clang'
    Assert generation_command =~# '-DCMAKE_CXX_COMPILER=clang++'

Execute ([CMake kits] Check CMakeKit generator setting):
    if !has('win32')
        silent call remove( g:cmake_kits["First"], "toolchain_file" )
        Assert !isdirectory('cmake-build-Release'), 'Build directory should not exist'
        silent CMakeSelectKit First
        silent CMake
        Assert isdirectory('cmake-build-Release'), 'Build directory should exist'
        Assert filereadable('cmake-build-Release/build.ninja'), 'build.ninja should exist'

        let g:cmake_kits['First']['generator'] = ''
        silent call RemoveDirectory('cmake-build-Release')
        Assert !isdirectory('cmake-build-Release'), 'Build directory should not exist'
        silent CMakeSelectKit First
        silent CMake
        Assert isdirectory('cmake-build-Release'), 'Build directory should exist'
        Assert filereadable('cmake-build-Release/Makefile'), 'Makefile should exist'
    endif

Execute ([CMake kits] Check CMakeKit cmake_usr_args setting):
    if !has('win32')
        Assert !isdirectory('cmake-build-Release'), 'Build directory should not exist'
        silent CMakeSelectKit First
        silent CMake
        Assert isdirectory('cmake-build-Release'), 'Build directory should exist'
        Assert filereadable('cmake-build-Release/CMakeCache.txt'), 'CMakeCache.txt should be generated'
        let generation_command = utils#cmake#getCMakeGenerationCommand()
        Assert generation_command =~# '-DANDROID_STL=c++_static'
        Assert generation_command =~# '-DANDROID_TOOLCHAIN=clang'
        Assert generation_command =~# '-DANDROID_ABI=arm64-v8a'
    endif

Execute ([CMake kits] Check CMakeKit environment variables):
    Assert !isdirectory('cmake-build-Release'), 'Build directory should not exist'
    silent CMakeSelectKit First
    silent CMakeSelectBuildType Release
    Assert isdirectory('cmake-build-Release'), 'Build directory should exist'
    AssertEqual $MY_CUSTOM_VARIABLE, '15'
    AssertEqual $MY_OTHER_CUSTOM_VARIABLE, 'YES'
    unlet $MY_CUSTOM_VARIABLE
    unlet $MY_OTHER_CUSTOM_VARIABLE

Execute ([CMake kits] Check CMakeKit change kit unset environment variables):
    Assert !isdirectory('cmake-build-Release'), 'Build directory should not exist'
    silent CMakeSelectKit First
    silent CMake
    Assert isdirectory('cmake-build-Release'), 'Build directory should exist'
    AssertEqual $MY_CUSTOM_VARIABLE, '15'
    AssertEqual $MY_OTHER_CUSTOM_VARIABLE, 'YES'
    silent CMakeSelectKit Second
    silent CMake
    Assert !exists('$MY_CUSTOM_VARIABLE')
    Assert !exists('$MY_OTHER_CUSTOM_VARIABLE')

Execute ([CMake kits] Check CMakeKit default):
    Assert !isdirectory('cmake-build-Release'), 'Build directory should not exist'
    silent CMakeSelectKit First
    silent CMakeSelectBuildType Release
    Assert isdirectory('cmake-build-Release'), 'Build directory should exist'
    AssertEqual $MY_CUSTOM_VARIABLE, '15'
    AssertEqual $MY_OTHER_CUSTOM_VARIABLE, 'YES'
    unlet $MY_CUSTOM_VARIABLE
    unlet $MY_OTHER_CUSTOM_VARIABLE

Execute ([CMake kits] Check CMakeKit selected kit without CMakeSelectKit):
    Assert !isdirectory('cmake-build-Release'), 'Build directory should not exist'
    let g:cmake_selected_kit = 'Second'
    silent CMake
    Assert isdirectory('cmake-build-Release'), 'Build directory should exist'
    let generation_command = utils#cmake#getCMakeGenerationCommand()
    Assert generation_command =~# '-DFlag=ON'

Execute ([CMake kits] Check build path pattern):
    let g:cmake_build_path_pattern = [ "./custom-build-name/%s/%s", "g:cmake_selected_kit, g:cmake_build_type" ]
    Assert !isdirectory('custom-build-name/First/Release'), 'Build directory should not exist'
    silent CMakeSelectKit First
    silent CMake
    AssertEqual g:cmake_selected_kit, 'First'
    silent CMakeSelectBuildType Release
    Assert isdirectory('custom-build-name/First/Release'), 'Build directory should exist'
    silent call RemoveDirectory('custom-build-name')

Execute ([CMake kits] Check build path pattern precedence over build_dir_prefix):
    let g:cmake_build_path_pattern = [ "./custom-build-name/%s/%s", "g:cmake_selected_kit, g:cmake_build_type" ]
    let g:cmake_build_dir_prefix = 'my-custom-prefix'
    Assert !isdirectory('custom-build-name/First/Release'), 'Build directory should not exist'
    Assert !isdirectory('my-custom-prefixRelease'), 'Build directory should not exist'
    silent CMakeSelectKit First
    silent CMakeSelectBuildType Release
    Assert isdirectory('custom-build-name/First/Release'), 'Build directory should exist'
    Assert !isdirectory('my-custom-prefixRelease'), 'Build directory should not exist'
    silent call RemoveDirectory('custom-build-name')

Execute ([CMake kits] Call joinUserArgs with a string):
    let usr_args = '-DOPTION=YES -DSETTING=YES'
    AssertEqual usr_args, utils#cmake#joinUserArgs( usr_args )

Execute ([CMake kits] Call splitUserArgs with a dict):
    let usr_args = {'OPTION':'YES', 'SETTING':'YES'}
    let new_args = utils#cmake#splitUserArgs( usr_args )
    Assert has_key( new_args, 'OPTION' )
    Assert has_key( new_args, 'SETTING' )
    Assert new_args['OPTION'] ==# 'YES'
    Assert new_args['SETTING'] ==# 'YES'

Execute ([CMake kits] Select a non-existing kit):
    call cmake4vim#SelectKit('nonexistant_key')
    Assert g:cmake_selected_kit ==# ''

Execute ([CMake Kits] Find CMakeKit config in current folder):
    Assert !filereadable('.cmake-kits.json'), 'File already exists'
    silent call writefile([json_encode({ 'randomKey' : 5 })], '.cmake-kits.json')
    Assert filereadable('.cmake-kits.json'), 'File was not created'
    let config = utils#cmake#kits#findCMakeKitsConfig()
    Assert !empty(config), 'Config file not found'
    silent call RemoveFile(g:cmake_kits_global_path)

Execute ([CMake Kits] Find CMakeKit specified by g:cmake_kits_global_path):
    let g:cmake_kits_global_path = '.global-cmake-kits.json'
    Assert !filereadable(g:cmake_kits_global_path), 'File already exists'
    silent call writefile([json_encode({ 'randomKey' : 5 })], g:cmake_kits_global_path)
    Assert filereadable(g:cmake_kits_global_path), 'File was not created'
    Assert !empty(utils#cmake#kits#findCMakeKitsConfig()), 'Config file not found'
    silent call RemoveFile(g:cmake_kits_global_path)

Execute ([CMake Kits] CMakeKit config in current folder has priority over g:cmake_kits_global_path):
    let g:cmake_kits_global_path = '.global-cmake-kits.json'
    Assert !filereadable(g:cmake_kits_global_path), 'File already exists'
    silent call writefile([json_encode({ 'randomKey' : 10 })], g:cmake_kits_global_path)
    Assert filereadable(g:cmake_kits_global_path), 'File was not created'

    Assert !filereadable('.cmake-kits.json'), 'File already exists'
    silent call writefile([json_encode({ 'randomKey' : 5 })], '.cmake-kits.json')
    Assert filereadable('.cmake-kits.json'), 'File was not created'

    let config = utils#cmake#kits#getCMakeKits()
    Assert !empty(config), 'Config is empty'
    AssertEqual config['randomKey'], 5
    silent call RemoveFile(g:cmake_kits_global_path)

Execute ([CMake Kits] Fail to find CMakeKit):
    Assert !filereadable('.cmake-kits.json')
    AssertEqual g:cmake_kits_global_path, ''
    Assert empty(utils#cmake#kits#findCMakeKitsConfig()), 'Found config file'

Execute ([CMake Kits] Read empty path):
    Assert empty(utils#cmake#kits#readCMakeKits(''))

Execute ([CMake Kits] Read valid CMakeKit config without predefined kits):
    unlet g:cmake_kits
    Assert !filereadable('.cmake-kits.json'), 'File already exists'
    silent call writefile([json_encode({ 'randomKey' : 5 })], '.cmake-kits.json')
    Assert filereadable('.cmake-kits.json'), 'File was not created'
    let cmake_kits = utils#cmake#kits#getCMakeKits()
    Assert !empty(cmake_kits), 'CMakeKits empty'
    Assert has_key(cmake_kits, 'randomKey'), 'Key missing'

Execute ([CMake Kits] Read valid CMakeKit config with predefined kits):
    Assert !filereadable('.cmake-kits.json'), 'File already exists'
    silent call writefile([json_encode({ 'randomKey' : 5 })], '.cmake-kits.json')
    Assert filereadable('.cmake-kits.json'), 'File was not created'
    let cmake_kits_from_config = utils#cmake#kits#getCMakeKits()
    Assert !empty(cmake_kits_from_config)
    Assert has_key(cmake_kits_from_config, 'randomKey')
    Assert !has_key(g:cmake_kits, 'randomKey')

Execute ([CMake Kits] Read non-existant CMakeKit config with predefined kits):
    Assert !filereadable('.cmake-kits.json'), 'File already exists'
    let cmake_kits_from_config = utils#cmake#kits#getCMakeKits()
    Assert !empty(cmake_kits_from_config)
    Assert has_key(cmake_kits_from_config, 'First')
    Assert has_key(cmake_kits_from_config, 'Second')

Execute ([CMake Kits] Reload cmake kits):
    let loaded_kits = utils#cmake#getLoadedCMakeKits()
    " it loaded g:cmake_kits
    Assert len(keys(loaded_kits)) == 2

    Assert !filereadable('.cmake-kits.json'), 'File already exists'
    silent call writefile([json_encode({ 'randomKey' : 5 })], '.cmake-kits.json')
    Assert filereadable('.cmake-kits.json'), 'File was not created'
    sleep 2

    silent call utils#cmake#reloadCMakeKits()
    let loaded_kits = utils#cmake#getLoadedCMakeKits()
    " it loaded .cmake-kits.json
    Assert len(keys(loaded_kits)) == 1
    Assert has_key(loaded_kits, 'randomKey'), "Missing key"

    silent call writefile([json_encode({ 'randomKey' : 5 , 'secondKey' : 10})], '.cmake-kits.json')
    sleep 2
    silent call utils#cmake#reloadCMakeKits()
    let loaded_kits = utils#cmake#getLoadedCMakeKits()
    " it loaded .cmake-kits.json
    Assert len(keys(loaded_kits)) == 2
    Assert has_key(loaded_kits, 'randomKey')
    Assert has_key(loaded_kits, 'secondKey')
