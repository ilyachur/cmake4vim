Before:
    silent call OpenTestProject()
    silent call RemoveCMakeDirs()

    silent call ResetPluginOptions()
    let g:cmake_build_executor = 'term'
    " Use on in order to close all windows and avoid E36 error
    silent on

After:
    silent cclose
    silent call RemoveCMakeDirs()

Execute ([Term executor] Generate cmake project with default settings):
    if !has('win32')    " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        call WaitForJob()
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    endif

Execute ([Term executor] Generate cmake project with default settings and build error target):
    if !has('win32')    " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        call WaitForJob()
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        silent CMakeBuild incorrect_lib
        silent on
        call WaitForJob()
    endif

Execute ([Term executor] Run 2 terms at once):
    if !has('win32')    " Skip for Windows
        let ret =  utils#exec#term#run('sleep 2', 1, '')
        let ret_code = utils#exec#term#run('sleep 2', 1, '')
        AssertEqual ret_code, -1
        call WaitForJob()
    endif

Execute ([Term executor] Append job to empty pool):
    if !has('win32')    " Skip for Windows
        let ret = utils#exec#term#append('sleep 2', 1, '')
        AssertNotEqual ret, 0
        call WaitForJob()
    endif

Execute ([Term executor] Run test_app target with mask arguments with term executor):
    if !has('win32')    " Skip for Windows
    if utils#cmake#verNewerOrEq([3, 14])
        silent CMake
        call WaitForJob()
        silent CMakeSelectTarget test_app
        AssertEqual bufnr('cmake4vim_execute'), -1
        if !has('win32')
            Assert !filereadable("cmake-build-Release/app/test_app"), "app should not be built"
        else
            Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should not be built"
        endif
        silent CMakeRun --gtest_filter=Test*
        call WaitForJob()
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
        endif
        AssertEqual bufnr('cmake4vim_execute'), -1
    else
        " WA to skip test
        call utils#common#executeCommand('echo --gtest_filter=Test* F1', 1)
        call WaitForJob()
    endif
    let output = getqflist()
    Assert 1 == len(output), output
    AssertEqual '--gtest_filter=Test* F1', output[0]['text']
    endif

