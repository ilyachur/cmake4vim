Before:
    silent call OpenTestProject()
    silent call RemoveCMakeDirs()
    let g:cmake_build_executor = 'system'
    " Use on in order to close all windows and avoid E36 error
    silent on

After:
    silent call RemoveCMakeDirs()

Execute ([Plugin Initialization] Check default initialization):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    AssertEqual g:cmake_compile_commands_link, ""
    AssertEqual g:cmake_compile_commands, 0
    AssertEqual g:cmake_usr_args, ""
    AssertEqual g:cmake_cxx_compiler, ""
    AssertEqual g:cmake_c_compiler, ""
    AssertEqual g:cmake_build_type, ""
    AssertEqual g:cmake_install_prefix, ""
    AssertEqual g:cmake_project_generator, ""
    AssertEqual g:make_arguments, ""
    AssertEqual g:cmake_executable, "cmake"
    let cmake_info = utils#cmake#common#getInfo()
    let cmake_gen = cmake_info['cmake']['generator']
    " Disable this check for windows with cmake 2.8
    if !has('win32') || utils#cmake#verNewerOrEq([3, 0])
        if stridx(cmake_gen, utils#gen#vs#getGeneratorName()) != -1
            AssertEqual g:cmake_build_target, "ALL_BUILD"
        else
            AssertEqual g:cmake_build_target, "all"
        endif
    endif
    AssertEqual g:cmake_build_dir, ""
    AssertEqual g:cmake_src_dir, ""
    AssertEqual g:cmake_build_dir_prefix, "cmake-build-"
    AssertEqual g:cmake_change_build_command, 1
    AssertEqual g:cmake_reload_after_save, 0
    AssertEqual sort( keys(g:cmake_variants) ), ['Debug', 'MinSizeRel', 'RelWithDebInfo', 'Release']
    AssertEqual g:cmake_ctest_args, ''
    AssertEqual g:cmake_kits, {}
    AssertEqual g:cmake_toolchain_file, ''
    AssertEqual g:cmake_selected_kit, ''
    AssertEqual g:cmake_kits_global_path, ''

Execute ([Plugin Initialization] Check cmake_usr_args conversion from string to dictionary):
    let cmake_usr_args = '-DMY_CUSTOM_OP=ON -DCOMPILER_PATH=this/is/a/compiler/path -DMOUNT_PATH=./mount/disk15'
    let split_args = utils#cmake#splitUserArgs( cmake_usr_args )
    AssertEqual sort( items( split_args ) ), [ ['COMPILER_PATH', 'this/is/a/compiler/path'], ['MOUNT_PATH', './mount/disk15' ], ['MY_CUSTOM_OP', 'ON'] ]

Execute ([Plugin initialization] Check cmake_usr_args conversion from dictionary to string):
    let cmake_usr_args = {'MY_CUSTOM_OP' : 'ON', 'COMPILER_PATH' : 'this/is/a/compiler/path', 'MOUNT_PATH' : './mount/disk15' }
    let joined_args = utils#cmake#joinUserArgs( cmake_usr_args )
    Assert joined_args =~# '-DMY_CUSTOM_OP=ON'
    Assert joined_args =~# '-DCOMPILER_PATH=this/is/a/compiler/path'
    Assert joined_args =~# '-DMOUNT_PATH=./mount/disk15'

Execute ([Plugin Initialization] Check cmake_usr_args conversion from string to dictionary to string):
    let cmake_usr_args = '-DMY_CUSTOM_OP=ON -DCOMPILER_PATH=this/is/a/compiler/path -DMOUNT_PATH=./mount/disk15'
    let new_cmake_usr_args = utils#cmake#joinUserArgs( utils#cmake#splitUserArgs( cmake_usr_args ) )
    Assert new_cmake_usr_args =~# '-DMY_CUSTOM_OP=ON'
    Assert new_cmake_usr_args =~# '-DCOMPILER_PATH=this/is/a/compiler/path'
    Assert new_cmake_usr_args =~# '-DMOUNT_PATH=./mount/disk15'
