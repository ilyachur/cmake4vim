Before:
    silent call OpenTestProject()

    silent call ResetPluginOptions()
    if !has('win32')
        let g:make_arguments='-j8'
    endif
    let g:cmake_usr_args="-DENABLE_TESTS=ON"
    " Use on in order to close all windows and avoid E36 error
    silent on

Execute ([CTest] Check CTest for empty project):
    " enable tests for windows with last cmake
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    CTest
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"

Execute ([CTest] Build project with gtest):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        silent CMakeBuild
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/Debug/unit_tests.exe"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute ([CTest] Run tests with default settings):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
            silent call system("cmake-build-Release/tests/unit_tests")
            AssertEqual 0, v:shell_error
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/Debug/unit_tests.exe"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute ([CTest] CTest with default settings):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/Debug/unit_tests.exe"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
        silent CTest
    endif

Execute ([CTest] CTest check target):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        silent CMakeBuild
        if !has('win32')
            AssertEqual g:cmake_build_target, 'all'
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            AssertEqual g:cmake_build_target, 'ALL_BUILD'
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/Debug/unit_tests.exe"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
        silent CTest
        if !has('win32')
            AssertEqual g:cmake_build_target, 'all'
        else
            AssertEqual g:cmake_build_target, 'ALL_BUILD'
        endif
    endif

Execute ([CTest] Run tests with custom settings):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake -DCUSTOM_OP=ON
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        silent CMakeBuild
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
            silent call system("cmake-build-Release/tests/unit_tests")
            AssertEqual 1, v:shell_error
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/Debug/unit_tests.exe"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute ([CTest] CTest with custom settings):
    " enable tests for windows with last cmake
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/tests/Debug/unit_tests.exe"), "unit_tests should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
        silent CTest
    endif

Execute ([CTest] CTest with custom args):
    if !has('win32')
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        let g:cmake_ctest_args = '-j2 --output-on-failure --verbose'
        silent CTest -R "non-existant_pattern"
        silent copen
        Assert w:quickfix_title =~# '-R "non-existant_pattern" -j2 --output-on-failure --verbose', 'Assert ' . w:quickfix_title
        silent cclose
    endif

Execute ([CTest] CTest with custom args and a bang):
    if !has('win32')
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        let g:cmake_ctest_args = '-j2 --output-on-failure --verbose'
        silent CTest! -R "non-existant_pattern"
        silent copen
        Assert w:quickfix_title !~# '-j2 --output-on-failure --verbose', 'Assert1 ' . w:quickfix_title
        Assert w:quickfix_title =~# '-R "non-existant_pattern"', 'Assert2 ' . w:quickfix_title
        silent cclose
    endif

Execute ([CTest] CTest for current target):
    if !has('win32')
        silent CMakeBuild unit_tests
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/tests/unit_tests"), "unit_tests should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        let g:cmake_ctest_args = ''
        silent CTestCurrent
        silent copen
        Assert w:quickfix_title =~# '-R unit_tests', 'Assert ' . w:quickfix_title
        silent cclose
    endif
