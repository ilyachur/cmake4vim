Before:
    function! RemoveFile(file)
        if has('win32')
            silent echo system("del /F /Q \"".a:file."\" >nul 2>&1")
        else
            silent echo system("rm -rf '".a:file."'")
        endif
    endfunction

    function! RemoveCMakeDirs()
        if has('win32')
            for l:value in ['cmake-build-Release', 'cmake-build-Debug', 'cmake-build-RelWithDebInfo', 'cmake-build-MinSizeRel', 'cmake-build']
                silent echo system("rd /S /Q \"".l:value."\" >nul 2>&1")
            endfor
        else
            silent echo system("rm -rf cmake-build*")
        endif
    endfunction
    cd test\ proj
    silent call RemoveFile("compile_commands.json")
    silent call RemoveCMakeDirs()
    silent CMakeReset

    let g:cmake_compile_commands_link=""
    let g:cmake_compile_commands=0
    let g:cmake_usr_args=""
    let g:cmake_cxx_compiler=""
    let g:cmake_c_compiler=""
    let g:cmake_build_type=""
    let g:cmake_install_prefix=""
    let g:cmake_project_generator=""
    let g:make_arguments=""
    let g:cmake_build_target="all"
    let g:cmake_build_dir=""
    let g:cmake_change_build_command=1
    let g:cmake_reload_after_save=0
    let g:cmake_build_dir_prefix="cmake-build-"
    let g:cmake_build_executor = 'system'
    " Use on in order to close all windows and avoid E36 error
    silent on

After:
    silent call RemoveFile("compile_commands.json")
    silent call RemoveCMakeDirs()
    cd ..

Execute (Should not find non-binary target):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    silent CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    silent CMakeBuild
    let result = utils#cmake#getBinaryPath()
    AssertEqual result, ''

Execute (Should not find library target):
    if utils#cmake#verNewerOrEq([3, 14])
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        silent CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        CMakeSelectTarget test_lib
        silent CMakeBuild
        let result = utils#cmake#getBinaryPath()
        AssertEqual result, ''
    endif

Execute (Should find binary target):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    silent CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    CMakeSelectTarget test_app
    silent CMakeBuild
    AssertEqual g:cmake_build_target, 'test_app'
    if !has('win32')
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
    else
        if utils#cmake#verNewerOrEq([3, 14])
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
        endif
    endif
    let result = utils#cmake#getBinaryPath()
    if !has('win32')
        AssertEqual utils#fs#fnameescape(result), utils#fs#fnameescape(utils#cmake#getBuildDir() . '/app/test_app')
    else
        if utils#cmake#verNewerOrEq([3, 14])
            AssertEqual utils#fs#fnameescape(result), utils#fs#fnameescape(utils#cmake#getBuildDir() . '/app/Debug/test_app.exe')
        endif
    endif

Execute (Run for empty target):
    let g:cmake_build_target=""
    silent CMakeRun

Execute (Run test_app target and open quickfix):
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        silent CMake
        silent CMakeSelectTarget test_app
        silent CMakeBuild
        silent CMakeRun
    else
        " WA to skip test
        call utils#common#executeCommand('echo F1')
    endif
    cope

Expect (See 'F1' result in quickfix):
  || F1

Execute (Run non-binary target and open quickfix):
    silent CMake
    silent CMakeBuild
    silent CMakeSelectTarget all
    silent CMakeRun
    AssertEqual v:errmsg , 'Executable "all" was not found'

Execute (Run test_app target with runtime output and open quickfix):
    if !has('win32') && utils#cmake#verNewerOrEq([3, 14])
        silent CMake -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=/tmp
        silent CMakeSelectTarget test_app
        silent CMakeBuild
        silent CMakeRun 123
    else
        " WA to skip test
        call utils#common#executeCommand('echo 123 F1')
    endif
    cope

Expect (See '123 F1' result in quickfix):
  || 123 F1
