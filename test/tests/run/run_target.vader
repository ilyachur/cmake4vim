Before:
    silent call OpenTestProject()

    silent call ResetPluginOptions()
    " Use on in order to close all windows and avoid E36 error
    silent on

Execute ([CMakeRun] Should not find non-binary target):
    silent CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    silent CMakeBuild
    let result = utils#cmake#getBinaryPath()
    AssertEqual result, ''

Execute ([CMakeRun] Should not find library target):
    if utils#cmake#verNewerOrEq([3, 14])
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        CMakeSelectTarget test_lib
        let result = utils#cmake#getBinaryPath()
        AssertEqual result, ''
    endif

Execute ([CMakeRun] Should find binary target):
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    CMakeSelectTarget test_app
    AssertEqual g:cmake_build_target, 'test_app'
    if !has('win32')
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
    else
        if utils#cmake#verNewerOrEq([3, 14])
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
        endif
    endif
    let result = utils#cmake#getBinaryPath()
    if !has('win32')
        AssertEqual utils#fs#fnameescape(result), utils#fs#fnameescape(utils#cmake#getBuildDir() . '/app/test_app')
    else
        if utils#cmake#verNewerOrEq([3, 14])
            AssertEqual utils#fs#fnameescape(result), utils#fs#fnameescape(utils#cmake#getBuildDir() . '/app/Debug/test_app.exe')
        endif
    endif

Execute ([CMakeRun] Run for empty target):
    let g:cmake_build_target=""
    silent CMakeRun

Execute ([CMakeRun] Run test_app target and open quickfix):
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        silent CMakeSelectTarget test_app
        silent CMakeBuild
        silent CMakeRun
    else
        " WA to skip test
        call utils#common#executeCommand('echo F1 test proj', 1)
    endif
    let output = getqflist()
    AssertEqual 'F1 test proj', output[0]['text']
    AssertEqual    1, len(output)

Execute ([CMakeRun] Run non-binary target and open quickfix):
    silent CMakeSelectTarget all
    silent CMakeRun
    AssertEqual v:errmsg , 'Executable "all" was not found'

Execute ([CMakeRun] Run test_app target with mask arguments):
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        silent CMakeSelectTarget test_app
        silent CMakeRun --gtest_filter=Test*
    else
        " WA to skip test
        call utils#common#executeCommand('echo --gtest_filter=Test* F1 test proj', 1)
    endif
    let output = getqflist()
    AssertEqual 1, len(output)
    AssertEqual '--gtest_filter=Test* F1 test proj', output[0]['text']

Execute ([CMakeRun] Run test_app target with runtime output and open quickfix):
    if !has('win32') && utils#cmake#verNewerOrEq([3, 14])
        silent CMake -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=/tmp
        silent CMakeSelectTarget test_app
        silent CMakeBuild
        silent CMakeRun 123
    else
        " WA to skip test
        call utils#common#executeCommand('echo 123 F1 test proj', 1)
    endif
    let output = getqflist()
    AssertEqual        1, len(output)
    AssertEqual '123 F1 test proj', output[0]['text']

Execute ([CMakeRun] run command builds and executes target):
    if utils#cmake#verNewerOrEq([3, 14])
        silent CMakeResetAndReload
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        if !has('win32')
            Assert !filereadable("cmake-build-Release/app/test_app"), "app should not be built"
        else
            Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should not be built"
        endif
        CMakeSelectTarget test_app
        silent CMakeRun
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
        endif
    endif
