Before:
    silent call OpenTestProject()
    silent call RemoveFile(".vimspector.json")
    silent call RemoveCMakeDirs()

    silent call ResetPluginOptions()
    let g:cmake_vimspector_support = 1
    " Use on in order to close all windows and avoid E36 error
    silent on

After:
    silent call RemoveFile(".vimspector.json")
    silent call RemoveCMakeDirs()

Execute ([Vimspector] Don't create default vimspector config):
    let g:cmake_vimspector_support=0
    Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
    let config = utils#config#vimspector#updateConfig({})
    Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"

Execute ([Vimspector] Create default vimspector config):
    Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
    let config = utils#config#vimspector#updateConfig({})
    Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
    Assert has_key(config, 'configurations'), "Config should have configurations"

Execute ([Vimspector] Avoid incorrect vimspector configs):
    Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
    " Create incorrect config
    silent call writefile( ['{  }'], '.vimspector.json' )

    Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
    let config = utils#config#vimspector#updateConfig({})
    Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
    Assert empty(config), "Config should be empty!"

Execute ([Vimspector] Read incorrect vimspector config):
    if !has('win32')
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
        " Create incorrect config
        silent call writefile( readfile( '../../tests/integration/vimspector.vader' ), '.vimspector.json' )

        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        let config = utils#config#vimspector#updateConfig({})
        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        Assert empty(config), "Config should be empty!"
    endif

Execute ([Vimspector] Read correct vimspector config):
    if !has('win32')
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
        " Create incorrect config
        silent call writefile( readfile( '../../tests/integration/.vimspector.json' ), '.vimspector.json' )

        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        let config = utils#config#vimspector#updateConfig({})
        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        Assert has_key(config, 'configurations'), "Config should have configurations"
        Assert has_key(config['configurations'], 'test_app'), "Config should have test_app"
        Assert has_key(config['configurations']['test_app'], 'configuration'), "Test_app should have configuration"
        Assert has_key(config['configurations']['test_app']['configuration'], 'program'), "Test_app configuration should have program"
        AssertEqual config['configurations']['test_app']['configuration']['program'], "${workspaceRoot}/test_app"
        AssertEqual len(config['configurations']['test_app']['configuration']['args']), 4

        Assert has_key(config['configurations'], 'something_else'), "Config should have something_else"
    endif

Execute ([Vimspector] Change correct vimspector config):
    if !has('win32')
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
        " Create incorrect config
        silent call writefile( readfile( '../../tests/integration/.vimspector.json' ), '.vimspector.json' )

        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        let config = utils#config#vimspector#updateConfig({'test_app': {'app': 'new_bin/test_app', 'args': []}})
        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        Assert has_key(config, 'configurations'), "Config should have configurations"
        Assert has_key(config['configurations'], 'test_app'), "Config should have test_app"
        Assert has_key(config['configurations']['test_app'], 'configuration'), "Test_app should have configuration"
        Assert has_key(config['configurations']['test_app']['configuration'], 'program'), "Test_app configuration should have program"
        AssertEqual config['configurations']['test_app']['configuration']['program'], "new_bin/test_app"
        AssertEqual len(config['configurations']['test_app']['configuration']['args']), 0

        Assert has_key(config['configurations'], 'something_else'), "Config should have something_else"
    endif

Execute ([Vimspector] Change correct vimspector config to incorrect data):
    if !has('win32')
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
        " Create incorrect config
        silent call writefile( readfile( '../../tests/integration/.vimspector.json' ), '.vimspector.json' )

        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        let config = utils#config#vimspector#updateConfig({'test_app': {}})
        Assert empty(config), "Config should be empty!"
    endif

Execute ([Vimspector] Run test_app target and change vimspector config with default config):
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        silent CMake
        silent CMakeSelectTarget test_app
        silent CMakeBuild
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
        silent CMakeRun 1 2 3
        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        let config = utils#config#vimspector#updateConfig({})
        Assert has_key(config, 'configurations'), "Config should have configurations"
        Assert has_key(config['configurations'], 'test_app'), "Config should have test_app"
        Assert has_key(config['configurations']['test_app'], 'configuration'), "Test_app should have configuration"
        Assert has_key(config['configurations']['test_app']['configuration'], 'program'), "Test_app configuration should have program"
        if !has('win32')
            AssertEqual config['configurations']['test_app']['configuration']['program'], utils#cmake#getBuildDir() . '/app/test_app'
        else
            AssertEqual config['configurations']['test_app']['configuration']['program'], utils#cmake#getBuildDir() . '/app/Debug/test_app.exe'
        endif
        Assert has_key(config['configurations']['test_app']['configuration'], 'type'), "Test_app configuration should have type"
        AssertEqual config['configurations']['test_app']['configuration']['type'], ''
        Assert has_key(config['configurations']['test_app']['configuration'], 'request'), "Test_app configuration should have request"
        AssertEqual config['configurations']['test_app']['configuration']['request'], 'launch'
        Assert has_key(config['configurations']['test_app'], 'adapter'), "Test_app configuration should have adapter"
        AssertEqual config['configurations']['test_app']['adapter'], ''
        AssertEqual len(config['configurations']['test_app']['configuration']['args']), 3
        AssertEqual config['configurations']['test_app']['configuration']['args'], ['1', '2', '3']
    endif

Execute ([Vimspector] Run test_app target and change vimspector config with custom config):
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        let g:cmake_vimspector_default_configuration = {
                    \ 'adapter': 'CodeLLDB',
                    \ 'configuration': {
                        \ 'type': 'lldb',
                        \ 'request': 'launch',
                        \ 'cwd': '${workspaceRoot}',
                        \ 'Mimode': '',
                        \ 'args': [],
                        \ 'program': ''
                        \ }
                    \ }
        silent CMake
        silent CMakeSelectTarget test_app
        silent CMakeBuild
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
        silent CMakeRun 1 2 3
        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        let config = utils#config#vimspector#updateConfig({})
        Assert has_key(config, 'configurations'), "Config should have configurations"
        Assert has_key(config['configurations'], 'test_app'), "Config should have test_app"
        Assert has_key(config['configurations']['test_app'], 'configuration'), "Test_app should have configuration"
        Assert has_key(config['configurations']['test_app']['configuration'], 'program'), "Test_app configuration should have program"
        if !has('win32')
            AssertEqual config['configurations']['test_app']['configuration']['program'], utils#cmake#getBuildDir() . '/app/test_app'
        else
            AssertEqual config['configurations']['test_app']['configuration']['program'], utils#cmake#getBuildDir() . '/app/Debug/test_app.exe'
        endif
        Assert has_key(config['configurations']['test_app']['configuration'], 'type'), "Test_app configuration should have type"
        AssertEqual config['configurations']['test_app']['configuration']['type'], 'lldb'
        Assert has_key(config['configurations']['test_app']['configuration'], 'request'), "Test_app configuration should have request"
        AssertEqual config['configurations']['test_app']['configuration']['request'], 'launch'
        Assert has_key(config['configurations']['test_app'], 'adapter'), "Test_app configuration should have adapter"
        AssertEqual config['configurations']['test_app']['adapter'], 'CodeLLDB'
        AssertEqual len(config['configurations']['test_app']['configuration']['args']), 3
        AssertEqual config['configurations']['test_app']['configuration']['args'], ['1', '2', '3']
    else
        " WA to skip test
        call utils#common#executeCommand('echo 1 2 3 F1 test proj', 1)
    endif

Expect ([Vimspector] See '1 2 3 F1 test proj' result in quickfix):
  || 1 2 3 F1 test proj

Execute ([Vimspector] Run test_app target with vimspector args):
    if !has('win32') && utils#cmake#verNewerOrEq([3, 14])
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
        " Create incorrect config
        silent call writefile( readfile( '../../tests/integration/.vimspector.json' ), '.vimspector.json' )

        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        silent CMake
        silent CMakeSelectTarget test_app
        silent CMakeBuild
        silent CMakeRun
        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        let config = utils#config#vimspector#updateConfig({})
        Assert has_key(config, 'configurations'), "Config should have configurations"
        Assert has_key(config['configurations'], 'test_app'), "Config should have test_app"
        Assert has_key(config['configurations']['test_app'], 'configuration'), "Test_app should have configuration"
        Assert has_key(config['configurations']['test_app']['configuration'], 'program'), "Test_app configuration should have program"
        if !has('win32')
            AssertEqual config['configurations']['test_app']['configuration']['program'], utils#cmake#getBuildDir() . '/app/test_app'
        else
            AssertEqual config['configurations']['test_app']['configuration']['program'], utils#cmake#getBuildDir() . '/app/Debug/test_app.exe'
        endif
        AssertEqual len(config['configurations']['test_app']['configuration']['args']), 4
    else
        " WA to skip test
        call utils#common#executeCommand('echo 1 2 3* 4 F1 app', 1)
    endif

Expect ([Vimspector] See '1 2 3* 4 F1' result in quickfix):
  || 1 2 3* 4 F1 app

Execute ([Vimspector] Run test_app target with reset vimspector args):
    if !has('win32') && utils#cmake#verNewerOrEq([3, 14])
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
        " Create incorrect config
        silent call writefile( readfile( '../../tests/integration/.vimspector.json' ), '.vimspector.json' )

        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        silent CMake
        silent CMakeSelectTarget test_app
        silent CMakeBuild
        silent CMakeRun!
        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        let config = utils#config#vimspector#updateConfig({})
        Assert has_key(config, 'configurations'), "Config should have configurations"
        Assert has_key(config['configurations'], 'test_app'), "Config should have test_app"
        Assert has_key(config['configurations']['test_app'], 'configuration'), "Test_app should have configuration"
        Assert has_key(config['configurations']['test_app']['configuration'], 'program'), "Test_app configuration should have program"
        if !has('win32')
            AssertEqual config['configurations']['test_app']['configuration']['program'], utils#cmake#getBuildDir() . '/app/test_app'
        else
            AssertEqual config['configurations']['test_app']['configuration']['program'], utils#cmake#getBuildDir() . '/app/Debug/test_app.exe'
        endif
        AssertEqual len(config['configurations']['test_app']['configuration']['args']), 0
    else
        " WA to skip test
        call utils#common#executeCommand('echo F1 app', 1)
    endif

Expect ([Vimspector] See 'F1' result in quickfix):
  || F1 app

Execute ([Vimspector] Read vimspector config containing backslashes):
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
        " Create config
        silent call writefile( readfile( '../../tests/integration/.vimspector.json' ), '.vimspector.json' )

        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        silent CMake
        silent CMakeSelectTarget test_app
        silent CMakeBuild
        silent CMakeRun!
        Assert filereadable(".vimspector.json"), "Vimspector config should be generated"
        let config = utils#config#vimspector#updateConfig({})
        Assert has_key(config, 'configurations'), "Config should have configurations"
        Assert has_key(config['configurations'], 'with_backslashes' ), 'Config should have the target with_backslashes'
        AssertEqual config['configurations']['with_backslashes']['configuration']['args'], ["--gtest_filter=\"Hello\""]

        if !has('nvim')
            AssertEqual trim(readfile('.vimspector.json')[32]), '"--gtest_filter=\"Hello\""'
        endif
    endif

Execute ([Vimspector] Run all target and check vimspector config):
    if !has('win32') || utils#cmake#verNewerOrEq([3, 14])
        silent CMake
        silent CMakeSelectTarget all
        silent CMakeBuild
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
        silent CMakeRun 1 2 3
        Assert !filereadable(".vimspector.json"), "Vimspector config should not be generated"
    endif
