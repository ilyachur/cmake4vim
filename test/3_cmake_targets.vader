Before:
    function! RemoveFile(file)
        if has('win32')
            echo system("del /F /Q \"".a:file."\" >nul 2>&1")
        else
            echo system("rm -rf '".a:file."'")
        endif
    endfunction

    function! RemoveCMakeDirs()
        if has('win32')
            for l:value in ['cmake-build-Release', 'cmake-build-Debug', 'cmake-build-RelWithDebInfo', 'cmake-build-MinSizeRel', 'cmake-build', 'build_test']
                echo system("rd /S /Q \"".l:value."\" >nul 2>&1")
            endfor
        else
            echo system("rm -rf cmake-build*")
        endif
    endfunction
    cd test_proj
    call RemoveFile("compile_commands.json")
    call RemoveCMakeDirs()

    let g:cmake_compile_commands_link=""
    let g:cmake_compile_commands=0
    let g:cmake_usr_args=""
    let g:cmake_cxx_compiler=""
    let g:cmake_c_compiler=""
    let g:cmake_build_type=""
    let g:cmake_install_prefix=""
    let g:cmake_project_generator=""
    let g:make_arguments=""
    let g:cmake_build_target=""
    let g:cmake_build_dir=""
    let g:cmake_change_build_command=1
    let g:cmake_reload_after_save=0
    let g:cmake_build_dir_prefix="cmake-build-"
    " Use on in order to close all windows and avoid E36 error
    on

After:
    call RemoveFile("compile_commands.json")
    call RemoveCMakeDirs()
    cd ..

Execute (Generate cmake project with default settings):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    CMakeBuild
    if !has('win32')
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    else
        Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
    endif

Execute (Generate cmake project with default settings):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    CMakeBuild
    if !has('win32')
        Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    else
        Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
    endif
    CMakeClean
    if !has('win32')
        Assert !filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert !filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    else
        Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
        Assert !filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
    endif

Execute (Build only library with arguments):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    CMakeSelectTarget test_lib
    CMakeBuild
    if !has('win32')
        Assert !filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    else
        Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
    endif

Execute (CMakeBuild for test library):
    " Check that make command works with changed build command
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    CMakeBuild test_lib
    silent! make
    if !has('win32')
        Assert !filereadable("cmake-build-Release/app/test_app"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
    else
        Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
        Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
    endif

Execute (Check all targets):
    if !has('win32') " Skip for Windows
    CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    let targets = cmake4vim#GetAllTargets()
    Assert len(targets) == 7, "test project should contain 7 targets"
    endif

Execute (Get cmake targets):
    if !has('win32') " Skip for Windows
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    let result = split(cmake4vim#CompleteTarget(0,0,0), "\n")
    Assert len(result) == 7, "test project should contain 7 targets"
    endif

# Execute (Compile cmake targets):
#     Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
#     CMake
#     Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
#     execute "normal! :CMakeSelectTarget test_l\<C-I>\<CR>"
#     silent! make
#     Assert !filereadable("cmake-build-Release/app/test_app"), "app shouldn't exist"
#     Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
#
# Execute (FZF cmake targets):
#     unlet! g:fzf_layout g:fzf_action g:fzf_history_dir
#     Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
#     CMake
#     Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
#     let result = fzf#cmake4vim#SelectTarget()
#     AssertEqual ['all'], result
