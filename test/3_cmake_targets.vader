Before:
    function! RemoveFile(file)
        if has('win32')
            echo system("del /F /Q \"".a:file."\" >nul 2>&1")
        else
            echo system("rm -rf '".a:file."'")
        endif
    endfunction

    function! RemoveCMakeDirs()
        if has('win32')
            for l:value in ['cmake-build-Release', 'cmake-build-Debug', 'cmake-build-RelWithDebInfo', 'cmake-build-MinSizeRel', 'cmake-build', 'build_test']
                echo system("rd /S /Q \"".l:value."\" >nul 2>&1")
            endfor
        else
            echo system("rm -rf cmake-build*")
        endif
    endfunction
    cd test\ proj
    call RemoveFile("compile_commands.json")
    call RemoveCMakeDirs()

    let g:cmake_compile_commands_link=""
    let g:cmake_compile_commands=0
    let g:cmake_usr_args=""
    let g:cmake_cxx_compiler=""
    let g:cmake_c_compiler=""
    let g:cmake_build_type=""
    let g:cmake_install_prefix=""
    let g:cmake_project_generator=""
    let g:make_arguments=""
    let g:cmake_build_target=""
    let g:cmake_build_dir=""
    let g:cmake_change_build_command=1
    let g:cmake_reload_after_save=0
    let g:cmake_build_dir_prefix="cmake-build-"
    " Use on in order to close all windows and avoid E36 error
    on

After:
    call RemoveFile("compile_commands.json")
    call RemoveCMakeDirs()
    cd ..

Execute (Generate cmake project with default settings):
    let cmake_gen = utils#cmake#getCmakeGeneratorType()
    if stridx(cmake_gen, utils#gen#vs#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#ninja#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#make#getGeneratorName()) != -1
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        CMakeBuild
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute (Check CMake generator):
    let cmake_gen = utils#cmake#getCmakeGeneratorType()
    if stridx(cmake_gen, utils#gen#vs#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#ninja#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#make#getGeneratorName()) != -1
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        let cmake_gen = utils#cmake#getCmakeGeneratorType()
        if has('win32')
            AssertNotEqual stridx(cmake_gen, utils#gen#vs#getGeneratorName()), -1, 'Cmake Generator '. cmake_gen
        else
            AssertNotEqual stridx(cmake_gen, utils#gen#make#getGeneratorName()), -1, 'Cmake Generator '. cmake_gen
        endif
    endif

Execute (Check CMakeClean):
    let cmake_gen = utils#cmake#getCmakeGeneratorType()
    if stridx(cmake_gen, utils#gen#vs#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#ninja#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#make#getGeneratorName()) != -1
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        CMakeBuild
        if !has('win32')
            Assert filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
        CMakeClean
        if !has('win32')
            Assert !filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert !filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert !filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute (Check CMakeClean for empty project):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    CMakeClean
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"

Execute (Build only library with arguments):
    let cmake_gen = utils#cmake#getCmakeGeneratorType()
    if stridx(cmake_gen, utils#gen#vs#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#ninja#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#make#getGeneratorName()) != -1
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        CMakeSelectTarget test_lib
        CMakeBuild
        if !has('win32')
            Assert !filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute (CMakeBuild for test library):
    let cmake_gen = utils#cmake#getCmakeGeneratorType()
    if stridx(cmake_gen, utils#gen#vs#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#ninja#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#make#getGeneratorName()) != -1
        " Check that make command works with changed build command
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        CMakeBuild test_lib
        silent! make
        if !has('win32')
            Assert !filereadable("cmake-build-Release/app/test_app"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/libtest_lib.a"), "test_lib should be built"
        else
            Assert !filereadable("cmake-build-Release/app/Debug/test_app.exe"), "app should be built"
            Assert filereadable("cmake-build-Release/lib/Debug/test_lib.lib"), "test_lib should be built"
        endif
    endif

Execute (Check all targets):
    let cmake_gen = utils#cmake#getCmakeGeneratorType()
    if stridx(cmake_gen, utils#gen#vs#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#ninja#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#make#getGeneratorName()) != -1
        CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        let targets = cmake4vim#GetAllTargets()
        if has('win32')
            AssertEqual len(targets), 5
        else
            AssertEqual len(targets), 8
        endif
    endif

Execute (Get cmake targets):
    let cmake_gen = utils#cmake#getCmakeGeneratorType()
    if stridx(cmake_gen, utils#gen#vs#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#ninja#getGeneratorName()) != -1 || stridx(cmake_gen, utils#gen#make#getGeneratorName()) != -1
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        let result = split(cmake4vim#CompleteTarget(0,0,0), "\n")
        if has('win32')
            AssertEqual len(targets), 5
        else
            AssertEqual len(targets), 8
        endif
    endif

Execute (Check all targets for empty project):
    Assert !filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt shouldn't be generated"
    let targets = cmake4vim#GetAllTargets()
    AssertEqual len(targets), 0
