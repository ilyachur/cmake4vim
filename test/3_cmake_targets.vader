Before:
    cd test_proj
    echo system("rm -rf cmake-build*")
    echo system("rm -rf compile_commands.json")

    let g:cmake_compile_commands_link=""
    let g:cmake_compile_commands=0
    let g:cmake_usr_args=""
    let g:cmake_cxx_compiler=""
    let g:cmake_c_compiler=""
    let g:cmake_build_type=""
    let g:cmake_install_prefix=""
    let g:cmake_project_generator=""
    let g:make_arguments=""
    let g:cmake_build_target="all"
    let g:cmake_build_dir=""
    let g:cmake_change_build_command=1
    let g:cmake_reload_after_save=0

After:
    echo system("rm -rf cmake-build*")
    echo system("rm -rf compile_commands.json")
    echo system("rm -rf build_test")
    cd ..

Execute (Generate cmake project with default settings):
    Assert !isdirectory("cmake-build-release"), "Build directory shouldn't exist"
    silent! CMake
    Assert filereadable("cmake-build-release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    silent! make
    Assert filereadable("cmake-build-release/app/test_app"), "app should be built"
    Assert filereadable("cmake-build-release/lib/libtest_lib.a"), "test_lib should be built"

Execute (Generate cmake project with default settings):
    Assert !isdirectory("cmake-build-release"), "Build directory shouldn't exist"
    silent! CMake
    Assert filereadable("cmake-build-release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    silent! make
    Assert filereadable("cmake-build-release/app/test_app"), "app should be built"
    Assert filereadable("cmake-build-release/lib/libtest_lib.a"), "test_lib should be built"
    silent! CMakeClean
    Assert !filereadable("cmake-build-release/app/test_app"), "app shouldn't exist"
    Assert !filereadable("cmake-build-release/lib/libtest_lib.a"), "test_lib shouldn't exist"

Execute (Build only library with arguments):
    Assert !isdirectory("cmake-build-release"), "Build directory shouldn't exist"
    silent! CMake
    Assert filereadable("cmake-build-release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    silent! CMakeSelectTarget test_lib
    silent! make
    Assert !filereadable("cmake-build-release/app/test_app"), "app shouldn't exist"
    Assert filereadable("cmake-build-release/lib/libtest_lib.a"), "test_lib should be built"

Execute (Check all targets):
    silent! CMake
    Assert filereadable("cmake-build-release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    let targets = cmake4vim#GetAllTargets()
    Assert len(targets) == 7, "test project should contain 7 targets"

# Execute (Compile cmake targets):
#     Assert !isdirectory("cmake-build-release"), "Build directory shouldn't exist"
#     silent! CMake
#     Assert filereadable("cmake-build-release/CMakeCache.txt"), "CMakeCache.txt should be generated"
#     execute "normal! :CMakeSelectTarget test_l\<C-I>\<CR>"
#     silent! make
#     Assert !filereadable("cmake-build-release/app/test_app"), "app shouldn't exist"
#     Assert filereadable("cmake-build-release/lib/libtest_lib.a"), "test_lib should be built"
#
# Execute (FZF cmake targets):
#     unlet! g:fzf_layout g:fzf_action g:fzf_history_dir
#     Assert !isdirectory("cmake-build-release"), "Build directory shouldn't exist"
#     silent! CMake
#     Assert filereadable("cmake-build-release/CMakeCache.txt"), "CMakeCache.txt should be generated"
#     let result = fzf#cmake4vim#SelectTarget()
#     AssertEqual ['all'], result
