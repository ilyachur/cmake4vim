Before:
    function! RemoveFile(file)
        if has('win32')
            echo system("del /F /Q \"".a:file."\" >nul 2>&1")
        else
            echo system("rm -rf '".a:file."'")
        endif
    endfunction

    function! RemoveCMakeDirs()
        if has('win32')
            for l:value in ['cmake-build-Release', 'cmake-build-Debug', 'cmake-build-RelWithDebInfo', 'cmake-build-MinSizeRel', 'cmake-build', 'build_test']
                echo system("rd /S /Q \"".l:value."\" >nul 2>&1")
            endfor
        else
            echo system("rm -rf cmake-build*")
        endif
    endfunction
    cd test_proj
    call RemoveFile("compile_commands.json")
    call RemoveCMakeDirs()

    let g:cmake_compile_commands_link=""
    let g:cmake_compile_commands=0
    let g:cmake_usr_args=""
    let g:cmake_cxx_compiler=""
    let g:cmake_c_compiler=""
    let g:cmake_build_type=""
    let g:cmake_install_prefix=""
    let g:cmake_project_generator=""
    let g:make_arguments=""
    let g:cmake_build_target="all"
    let g:cmake_build_dir=""
    let g:cmake_change_build_command=1
    let g:cmake_reload_after_save=0
    let g:cmake_build_dir_prefix="cmake-build-"

After:
    call RemoveFile("compile_commands.json")
    call RemoveCMakeDirs()
    cd ..

Execute (Generate cmake project with default settings):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    silent! CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    echo system("rm -rf cmake-build-Release")

Execute (Remove cmake build forder):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    silent! CMake
    Assert isdirectory("cmake-build-Release"), "Build directory should be created"
    silent! CMakeReset
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"

Execute (Generate Debug cmake project):
    Assert !isdirectory("cmake-build-Debug"), "Build directory shouldn't exist"
    let g:cmake_build_type='Debug'
    silent! CMake
    Assert filereadable("cmake-build-Debug/CMakeCache.txt"), "CMakeCache.txt should be exist"
    echo system("rm -rf cmake-build-Debug")

Execute (Generate cmake project with compilation database generation):
    if !has('win32') " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        let g:cmake_compile_commands=1
        silent! CMakeResetAndReload
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/compile_commands.json"), "compile_commands.json should be generated"
        echo system("rm -rf cmake-build-Release")
    endif

Execute (Generate cmake project with link to compilation database):
    if !has('win32') " Skip for Windows
        Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
        let g:cmake_compile_commands=1
        let g:cmake_compile_commands_link='./'
        silent! CMake
        Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
        Assert filereadable("cmake-build-Release/compile_commands.json"), "compile_commands.json should be generated"
        Assert filereadable("compile_commands.json"), "Link to compile_commands.json should be generated"
        echo system("rm -rf cmake-build-Release")
    endif

Execute (Generate cmake project in custom build folder):
    Assert !isdirectory("build_test"), "Build directory shouldn't exist"
    let g:cmake_build_dir='build_test'
    silent! CMakeResetAndReload
    Assert filereadable("build_test/CMakeCache.txt"), "CMakeCache.txt should be generated"
    echo system("rm -rf build_test")

Execute (Generate cmake project with custom generator):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    let g:cmake_project_generator='Unix Makefiles'
    silent! CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be exist"
    echo system("rm -rf cmake-build-Release")

Execute (Generate cmake project with custom options):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    let g:cmake_usr_args='-DCUSTOM_OP=OFF'
    silent! CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be exist"
    echo system("rm -rf cmake-build-Release")

Execute (Generate cmake project with custom install prefix):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    let g:cmake_install_prefix='.'
    silent! CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be exist"
    echo system("rm -rf cmake-build-Release")

Execute (Generate cmake project with custom compilers):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    let g:cmake_c_compiler='gcc'
    let g:cmake_cxx_compiler='g++'
    silent! CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be exist"
    echo system("rm -rf cmake-build-Release")

Execute (Get cmake info):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    silent! CMake
    Assert filereadable("cmake-build-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    let result = cmake4vim#GetCMakeInfo()
    Assert len(result) == 4, "test project should contain 4 fields with cmake info"

Execute (Generate cmake project in prefix build folder):
    Assert !isdirectory("cmake-vador-Release"), "Build directory shouldn't exist"
    let g:cmake_build_dir_prefix='cmake-vador-'
    silent! CMakeResetAndReload
    Assert filereadable("cmake-vador-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    echo system("rm -rf cmake-vador-Release")

Execute (Generate cmake project and change BuildType):
    Assert !isdirectory("cmake-build-Release"), "Build directory shouldn't exist"
    Assert !isdirectory("cmake-build-Debug"), "Build directory shouldn't exist"
    let g:cmake_build_dir_prefix='cmake-vador-'
    silent! CMakeResetAndReload
    Assert filereadable("cmake-vador-Release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    Assert !isdirectory("cmake-build-Debug"), "Build directory shouldn't exist"
    silent! CMakeSelectBuildType Debug
    Assert filereadable("cmake-vador-Debug/CMakeCache.txt"), "CMakeCache.txt should be generated"
    echo system("rm -rf cmake-vador-Release")
    echo system("rm -rf cmake-vador-Debug")

Execute (Generate RelWithDebInfo cmake project):
    Assert !isdirectory("cmake-build-RelWithDebInfo"), "Build directory shouldn't exist"
    let g:cmake_build_type='RelWithDebInfo'
    silent! CMake
    Assert filereadable("cmake-build-RelWithDebInfo/CMakeCache.txt"), "CMakeCache.txt should be exist"
    echo system("rm -rf cmake-build-RelWithDebInfo")

Execute (Generate MinSizeRel cmake project):
    Assert !isdirectory("cmake-build-MinSizeRel"), "Build directory shouldn't exist"
    let g:cmake_build_type='MinSizeRel'
    silent! CMake
    Assert filereadable("cmake-build-MinSizeRel/CMakeCache.txt"), "CMakeCache.txt should be exist"
    echo system("rm -rf cmake-build-MinSizeRel")
