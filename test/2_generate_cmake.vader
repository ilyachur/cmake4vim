Before:
    cd test_proj
    echo system("rm -rf cmake-build*")
    echo system("rm -rf compile_commands.json")

    let g:cmake_compile_commands_link=""
    let g:cmake_compile_commands=0
    let g:cmake_usr_args=""
    let g:cmake_cxx_compiler=""
    let g:cmake_c_compiler=""
    let g:cmake_build_type=""
    let g:cmake_install_prefix=""
    let g:cmake_project_generator=""
    let g:make_arguments=""
    let g:cmake_build_target="all"
    let g:cmake_build_dir=""
    let g:cmake_change_build_command=1
    let g:cmake_reload_after_save=0

After:
    echo system("rm -rf cmake-build*")
    echo system("rm -rf compile_commands.json")
    echo system("rm -rf build_test")
    cd ..

Execute (Generate cmake project with default settings):
    Assert !isdirectory("cmake-build-release"), "Build directory shouldn't exist"
    CMake
    Assert filereadable("cmake-build-release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    echo system("rm -rf cmake-build-release")

Execute (Remove cmake build forder):
    Assert !isdirectory("cmake-build-release"), "Build directory shouldn't exist"
    CMake
    Assert isdirectory("cmake-build-release"), "Build directory should be created"
    CMakeReset
    Assert !isdirectory("cmake-build-release"), "Build directory shouldn't exist"

Execute (Generate Debug cmake project):
    Assert !isdirectory("cmake-build-debug"), "Build directory shouldn't exist"
    let g:cmake_build_type='Debug'
    CMake
    Assert filereadable("cmake-build-debug/CMakeCache.txt"), "CMakeCache.txt should be exist"
    echo system("rm -rf cmake-build-debug")

Execute (Generate cmake project with compilation database generation):
    Assert !isdirectory("cmake-build-release"), "Build directory shouldn't exist"
    let g:cmake_compile_commands=1
    CMakeResetAndReload
    Assert filereadable("cmake-build-release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    Assert filereadable("cmake-build-release/compile_commands.json"), "compile_commands.json should be generated"
    echo system("rm -rf cmake-build-release")

Execute (Generate cmake project with link to compilation database):
    Assert !isdirectory("cmake-build-release"), "Build directory shouldn't exist"
    let g:cmake_compile_commands=1
    let g:cmake_compile_commands_link='./'
    CMake
    Assert filereadable("cmake-build-release/CMakeCache.txt"), "CMakeCache.txt should be generated"
    Assert filereadable("cmake-build-release/compile_commands.json"), "compile_commands.json should be generated"
    Assert filereadable("compile_commands.json"), "Link to compile_commands.json should be generated"
    echo system("rm -rf cmake-build-release")

Execute (Generate cmake project in custom build folder):
    Assert !isdirectory("build_test"), "Build directory shouldn't exist"
    let g:cmake_build_dir='build_test'
    CMakeResetAndReload
    Assert filereadable("build_test/CMakeCache.txt"), "CMakeCache.txt should be generated"
    echo system("rm -rf build_test")
